xgroups = matrix(data = x, nrow = 3)
xgroups
View(xgroups)
View(xgroups)
xgroups = matrix(data = x, nrow = 10)
xgroups = matrix(data = sample(x), nrow = 10)
xgroups = matrix(data = sample(x), nrow = 10)
xgroups = matrix(data = sample(x), nrow = 10)
xgroups = matrix(data = sample(x), nrow = 10)
xgroups = matrix(data = sample(x), nrow = 10)
createRandomPointsWithErrorsForTargetFunction = function(numberOfPoints, interval) {
x = runif(numberOfPoints, interval[1], interval[2])
y = 2 + x - 0.5 * x ^ 2
errors = rnorm(n = numberOfPoints, mean = 0, sd = 0.4)
ywitherrors = y + errors # adding errors to the function values
return(matrix(c(x, ywitherrors),ncol = 2, nrow = length(x)))
}
mse = function(points, func, numbers) {
return(sum((points - func) ^ 2) / numbers)
}
polyFit = function(x, y, degree) {
return(lm(y ~ poly(x, degree)))
}
# configuration
set.seed(20)
degree = 0
interval = c(-3, 3)
points = 30
points = createRandomPointsWithErrorsForTargetFunction(numberOfPoints = points, interval)
x = points[,1]
y = points[,2]
plot(x, y, pch=16)
# creating model with the give degree
regression = lm(y ~ poly(x, degree))
values = seq(from = interval[1], to = interval[2], by = 0.1)
model = predict(regression, data.frame(x = values), interval = "confidence", level = 0.95)
# adding mode to the plot
lines(values, model[,1], col='green', lwd=5)
mse_value = mean(regression$residuals^2)
sprintf("MSE: %f", mse_value)
# task 2
number = 1000
values = createRandomPointsWithErrorsForTargetFunction(numberOfPoints = number, interval)
x = values[,1]
y = values[,2]
points(x = x, y = y, col="red")
values = seq(interval[1], interval[2], length.out = number)
newprediction = predict(regression, data.frame(x = values), interval = "confidence", level = 0.95)
new_mse_value = mse(points = newprediction[,1], func = y, numbers = points)
sprintf("MSE: %f", new_mse_value)
# c.
x = points[,1]
y = points[,1]
for (i in 1:10) {
xgroups = matrix(data = x, nrow = 3)
}
createRandomPointsWithErrorsForTargetFunction = function(numberOfPoints, interval) {
x = runif(numberOfPoints, interval[1], interval[2])
y = 2 + x - 0.5 * x ^ 2
errors = rnorm(n = numberOfPoints, mean = 0, sd = 0.4)
ywitherrors = y + errors # adding errors to the function values
return(matrix(c(x, ywitherrors),ncol = 2, nrow = length(x)))
}
mse = function(points, func, numbers) {
return(sum((points - func) ^ 2) / numbers)
}
polyFit = function(x, y, degree) {
return(lm(y ~ poly(x, degree)))
}
# configuration
set.seed(20)
degree = 4
interval = c(-3, 3)
points = 30
points = createRandomPointsWithErrorsForTargetFunction(numberOfPoints = points, interval)
x = points[,1]
y = points[,2]
plot(x, y, pch=16)
# creating model with the give degree
regression = lm(y ~ poly(x, degree))
values = seq(from = interval[1], to = interval[2], by = 0.1)
model = predict(regression, data.frame(x = values), interval = "confidence", level = 0.95)
# adding mode to the plot
lines(values, model[,1], col='green', lwd=5)
mse_value = mean(regression$residuals^2)
sprintf("MSE: %f", mse_value)
# task 2
number = 1000
values = createRandomPointsWithErrorsForTargetFunction(numberOfPoints = number, interval)
x = values[,1]
y = values[,2]
points(x = x, y = y, col="red")
values = seq(interval[1], interval[2], length.out = number)
newprediction = predict(regression, data.frame(x = values), interval = "confidence", level = 0.95)
new_mse_value = mse(points = newprediction[,1], func = y, numbers = points)
sprintf("MSE: %f", new_mse_value)
createRandomPointsWithErrorsForTargetFunction = function(numberOfPoints, interval) {
x = runif(numberOfPoints, interval[1], interval[2])
y = 2 + x - 0.5 * x ^ 2
errors = rnorm(n = numberOfPoints, mean = 0, sd = 0.4)
ywitherrors = y + errors # adding errors to the function values
return(matrix(c(x, ywitherrors),ncol = 2, nrow = length(x)))
}
mse = function(points, func, numbers) {
return(sum((points - func) ^ 2) / numbers)
}
# configuration
set.seed(20)
degree = 8
interval = c(-3, 3)
points = 30
points = createRandomPointsWithErrorsForTargetFunction(numberOfPoints = points, interval)
x = points[,1]
y = points[,2]
plot(x, y, pch=16)
# creating model with the give degree
regression = lm(y ~ poly(x, degree))
values = seq(from = interval[1], to = interval[2], by = 0.1)
model = predict(regression, data.frame(x = values), interval = "confidence", level = 0.95)
# adding mode to the plot
lines(values, model[,1], col='green', lwd=5)
mse_value = mean(regression$residuals^2)
sprintf("MSE: %f", mse_value)
# task 2
points = 1000
values = createRandomPointsWithErrorsForTargetFunction(numberOfPoints = points, interval)
x = values[,1]
y = values[,2]
points(x = x, y = y, col="red")
values = seq(interval[1], interval[2], length.out = number)
newprediction = predict(regression, data.frame(x = values), interval = "confidence", level = 0.95)
new_mse_value = mse(points = newprediction[,1], func = y, numbers = points)
sprintf("MSE: %f", new_mse_value)
plotOutstateVSPrivate = function(data) {
boxplot(data$Outstate, data$Private, names = c("Outstage", "Private"), log = "y")
}
plotOutstateVSElite = function(data) {
boxplot(data$Outstate, data$Elite, names = c("Outstage", "Elite"), log = "y")
}
library(ISLR)
data("College")
# college = csv.read("college.csv", header = TRUE, sep = ";")
rownames(College)
#fix(College)
# 8/ii
summary(College)
pairs(College[,1:10])
# 8/iii
plotOutstateVSPrivate(College)
# 8/iv
Elite=rep("No", nrow(College))
Elite[College$Top10perc > 50] = "Yes"
Elite = as.factor(Elite)
College = data.frame(College, Elite)
summary(College)
plotOutstateVSElite(College)
# 8/v
par(mfrow=c(2,2))
hist(x = College$Books)
hist(x = College$Grad.Rate)
hist(x = College$PhD)
hist(x = College$Accept)
plotOutstateVSPrivate = function(data) {
boxplot(data$Private, data$Outstate, names = c("Outstage", "Private"), log = "y")
}
plotOutstateVSElite = function(data) {
boxplot(data$Outstate, data$Elite, names = c("Outstage", "Elite"), log = "y")
}
library(ISLR)
data("College")
# college = csv.read("college.csv", header = TRUE, sep = ";")
rownames(College)
#fix(College)
# 8/ii
summary(College)
pairs(College[,1:10])
# 8/iii
plotOutstateVSPrivate(College)
# 8/iv
Elite=rep("No", nrow(College))
Elite[College$Top10perc > 50] = "Yes"
Elite = as.factor(Elite)
College = data.frame(College, Elite)
summary(College)
plotOutstateVSElite(College)
# 8/v
par(mfrow=c(2,2))
hist(x = College$Books)
hist(x = College$Grad.Rate)
hist(x = College$PhD)
hist(x = College$Accept)
plotOutstateVSPrivate = function(data) {
boxplot(data$Private, data$Outstate, names = c("Private", "Outstate"), log = "y")
}
plotOutstateVSElite = function(data) {
boxplot(data$Outstate, data$Elite, names = c("Outstage", "Elite"), log = "y")
}
library(ISLR)
data("College")
# college = csv.read("college.csv", header = TRUE, sep = ";")
rownames(College)
#fix(College)
# 8/ii
summary(College)
pairs(College[,1:10])
# 8/iii
plotOutstateVSPrivate(College)
# 8/iv
Elite=rep("No", nrow(College))
Elite[College$Top10perc > 50] = "Yes"
Elite = as.factor(Elite)
College = data.frame(College, Elite)
summary(College)
plotOutstateVSElite(College)
# 8/v
par(mfrow=c(2,2))
hist(x = College$Books)
hist(x = College$Grad.Rate)
hist(x = College$PhD)
hist(x = College$Accept)
plotOutstateVSPrivate = function(data) {
boxplot(data$Private, data$Outstate, names = c("Private", "Outstate"))
}
plotOutstateVSElite = function(data) {
boxplot(data$Outstate, data$Elite, names = c("Outstage", "Elite"), log = "y")
}
library(ISLR)
data("College")
# college = csv.read("college.csv", header = TRUE, sep = ";")
rownames(College)
#fix(College)
# 8/ii
summary(College)
pairs(College[,1:10])
# 8/iii
plotOutstateVSPrivate(College)
# 8/iv
Elite=rep("No", nrow(College))
Elite[College$Top10perc > 50] = "Yes"
Elite = as.factor(Elite)
College = data.frame(College, Elite)
summary(College)
plotOutstateVSElite(College)
# 8/v
par(mfrow=c(2,2))
hist(x = College$Books)
hist(x = College$Grad.Rate)
hist(x = College$PhD)
hist(x = College$Accept)
plot(data$Private, data$Outstate, names = c("Private", "Outstate"))
plotOutstateVSPrivate = function(data) {
plot(data$Private, data$Outstate, names = c("Private", "Outstate"))
}
plotOutstateVSElite = function(data) {
boxplot(data$Outstate, data$Elite, names = c("Outstage", "Elite"), log = "y")
}
library(ISLR)
data("College")
# college = csv.read("college.csv", header = TRUE, sep = ";")
rownames(College)
#fix(College)
# 8/ii
summary(College)
pairs(College[,1:10])
# 8/iii
plotOutstateVSPrivate(College)
# 8/iv
Elite=rep("No", nrow(College))
Elite[College$Top10perc > 50] = "Yes"
Elite = as.factor(Elite)
College = data.frame(College, Elite)
summary(College)
plotOutstateVSElite(College)
# 8/v
par(mfrow=c(2,2))
hist(x = College$Books)
hist(x = College$Grad.Rate)
hist(x = College$PhD)
hist(x = College$Accept)
plotOutstateVSPrivate = function(data) {
plot(data$Private, data$Outstate)
}
plotOutstateVSElite = function(data) {
boxplot(data$Outstate, data$Elite, names = c("Outstage", "Elite"), log = "y")
}
library(ISLR)
data("College")
# college = csv.read("college.csv", header = TRUE, sep = ";")
rownames(College)
#fix(College)
# 8/ii
summary(College)
pairs(College[,1:10])
# 8/iii
plotOutstateVSPrivate(College)
# 8/iv
Elite=rep("No", nrow(College))
Elite[College$Top10perc > 50] = "Yes"
Elite = as.factor(Elite)
College = data.frame(College, Elite)
summary(College)
plotOutstateVSElite(College)
# 8/v
par(mfrow=c(2,2))
hist(x = College$Books)
hist(x = College$Grad.Rate)
hist(x = College$PhD)
hist(x = College$Accept)
plotOutstateVSPrivate = function(data) {
plot(data$Private, data$Outstate, title = "Outstate vs. Private")
}
plotOutstateVSElite = function(data) {
boxplot(data$Outstate, data$Elite, names = c("Outstage", "Elite"), log = "y")
}
library(ISLR)
data("College")
# college = csv.read("college.csv", header = TRUE, sep = ";")
rownames(College)
#fix(College)
# 8/ii
summary(College)
pairs(College[,1:10])
# 8/iii
plotOutstateVSPrivate(College)
# 8/iv
Elite=rep("No", nrow(College))
Elite[College$Top10perc > 50] = "Yes"
Elite = as.factor(Elite)
College = data.frame(College, Elite)
summary(College)
plotOutstateVSElite(College)
# 8/v
par(mfrow=c(2,2))
hist(x = College$Books)
hist(x = College$Grad.Rate)
hist(x = College$PhD)
hist(x = College$Accept)
plotOutstateVSPrivate = function(data) {
plot(data$Private, data$Outstate, title = "Outstate vs. Private")
}
plotOutstateVSElite = function(data) {
boxplot(data$Outstate, data$Elite, names = c("Outstage", "Elite"), log = "y")
}
library(ISLR)
data("College")
# college = csv.read("college.csv", header = TRUE, sep = ";")
rownames(College)
#fix(College)
# 8/ii
summary(College)
pairs(College[,1:10])
# 8/iii
plotOutstateVSPrivate(College)
# 8/iv
Elite=rep("No", nrow(College))
Elite[College$Top10perc > 50] = "Yes"
Elite = as.factor(Elite)
College = data.frame(College, Elite)
summary(College)
plotOutstateVSElite(College)
# 8/v
par(mfrow=c(2,2))
hist(x = College$Books)
hist(x = College$Grad.Rate)
hist(x = College$PhD)
hist(x = College$Accept)
plot(data$Private, data$Outstate, title = "Outstate vs. Private")
plotOutstateVSPrivate
plotOutstateVSPrivate
plotOutstateVSPrivate(College)
title(main = "Outstate vs. Private")
plotOutstateVSPrivate = function(data) {
plot(data$Private, data$Outstate)
title(main = "Outstate vs. Private")
}
plotOutstateVSElite = function(data) {
boxplot(data$Outstate, data$Elite, names = c("Outstage", "Elite"), log = "y")
}
library(ISLR)
data("College")
# college = csv.read("college.csv", header = TRUE, sep = ";")
rownames(College)
#fix(College)
# 8/ii
summary(College)
pairs(College[,1:10])
# 8/iii
plotOutstateVSPrivate(College)
# 8/iv
Elite=rep("No", nrow(College))
Elite[College$Top10perc > 50] = "Yes"
Elite = as.factor(Elite)
College = data.frame(College, Elite)
summary(College)
plotOutstateVSElite(College)
# 8/v
par(mfrow=c(2,2))
hist(x = College$Books)
hist(x = College$Grad.Rate)
hist(x = College$PhD)
hist(x = College$Accept)
createRandomPointsWithErrorsForTargetFunction = function(numberOfPoints, interval) {
x = runif(numberOfPoints, interval[1], interval[2])
y = 2 + x - 0.5 * x ^ 2
errors = rnorm(n = numberOfPoints, mean = 0, sd = 0.4)
ywitherrors = y + errors # adding errors to the function values
return(matrix(c(x, ywitherrors),ncol = 2, nrow = length(x)))
}
mse = function(points, func, numbers) {
return(sum((points - func) ^ 2) / numbers)
}
# configuration
set.seed(20)
degree = 8
interval = c(-3, 3)
points = 30
points = createRandomPointsWithErrorsForTargetFunction(numberOfPoints = points, interval)
x = points[,1]
y = points[,2]
plot(x, y, pch=16)
# creating model with the give degree
regression = lm(y ~ poly(x, degree))
values = seq(from = interval[1], to = interval[2], by = 0.1)
model = predict(regression, data.frame(x = values), interval = "confidence", level = 0.95)
# adding mode to the plot
lines(values, model[,1], col='green', lwd=5)
mse_value = mean(regression$residuals^2)
sprintf("MSE: %f", mse_value)
# task 2
points = 1000
values = createRandomPointsWithErrorsForTargetFunction(numberOfPoints = points, interval)
x = values[,1]
y = values[,2]
points(x = x, y = y, col="red")
values = seq(interval[1], interval[2], length.out = number)
newprediction = predict(regression, data.frame(x = values), interval = "confidence", level = 0.95)
new_mse_value = mse(points = newprediction[,1], func = y, numbers = points)
sprintf("MSE: %f", new_mse_value)
createRandomPointsWithErrorsForTargetFunction = function(numberOfPoints, interval) {
x = runif(numberOfPoints, interval[1], interval[2])
y = 2 + x - 0.5 * x ^ 2
errors = rnorm(n = numberOfPoints, mean = 0, sd = 0.4)
ywitherrors = y + errors # adding errors to the function values
return(matrix(c(x, ywitherrors),ncol = 2, nrow = length(x)))
}
mse = function(points, func, numbers) {
return(mean((points - func) ^ 2))
}
# configuration
set.seed(20)
degree = 8
interval = c(-3, 3)
points = 30
points = createRandomPointsWithErrorsForTargetFunction(numberOfPoints = points, interval)
x = points[,1]
y = points[,2]
plot(x, y, pch=16)
# creating model with the give degree
regression = lm(y ~ poly(x, degree))
values = seq(from = interval[1], to = interval[2], by = 0.1)
model = predict(regression, data.frame(x = values), interval = "confidence", level = 0.95)
# adding mode to the plot
lines(values, model[,1], col='green', lwd=5)
mse_value = mean(regression$residuals^2)
sprintf("MSE: %f", mse_value)
# task 2
points = 1000
values = createRandomPointsWithErrorsForTargetFunction(numberOfPoints = points, interval)
x = values[,1]
y = values[,2]
points(x = x, y = y, col="red")
values = seq(interval[1], interval[2], length.out = number)
newprediction = predict(regression, data.frame(x = values), interval = "confidence", level = 0.95)
new_mse_value = mse(points = newprediction[,1], func = y, numbers = points)
sprintf("MSE: %f", new_mse_value)
createRandomPointsWithErrorsForTargetFunction = function(numberOfPoints, interval) {
x = runif(numberOfPoints, interval[1], interval[2])
y = 2 + x - 0.5 * x ^ 2
errors = rnorm(n = numberOfPoints, mean = 0, sd = 0.4)
ywitherrors = y + errors # adding errors to the function values
return(matrix(c(x, ywitherrors),ncol = 2, nrow = length(x)))
}
mse = function(points, func, numbers) {
return(mean((points - func) ^ 2))
}
# configuration
set.seed(20)
degree = 8
interval = c(-3, 3)
points = 30
points = createRandomPointsWithErrorsForTargetFunction(numberOfPoints = points, interval)
x = points[,1]
y = points[,2]
plot(x, y, pch=16)
# creating model with the give degree
regression = lm(y ~ poly(x, degree))
values = seq(from = interval[1], to = interval[2], by = 0.1)
model = predict(regression, data.frame(x = values), interval = "confidence", level = 0.95)
# adding mode to the plot
lines(values, model[,1], col='green', lwd=5)
mse_value = mean(regression$residuals^2)
sprintf("MSE: %f", mse_value)
# task 2
points = 1000
values = createRandomPointsWithErrorsForTargetFunction(numberOfPoints = points, interval)
x = values[,1]
y = values[,2]
points(x = x, y = y, col="red")
values = seq(interval[1], interval[2], length.out = number)
newprediction = predict(regression, data.frame(x = values), interval = "confidence", level = 0.95)
new_mse_value = mse(points = newprediction[,1], func = y, numbers = points)
sprintf("MSE: %f", new_mse_value)
